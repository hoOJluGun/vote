#!/usr/bin/env node
/**
 * Telegram Bot Backend - –ê–°–ò–ù–•–†–û–ù–ù–ò–ô –°–ï–†–í–ï–† –î–õ–Ø –ì–û–õ–û–°–£–í–ê–ù–ù–Ø
 * –†–µ–∞–ª—å–Ω–∏–π —á–∞—Å, –≤–µ–±—Ö—É–∫–∏, WebSocket, –ø–æ–≤–Ω–∞ —ñ–∑–æ–ª—è—Ü—ñ—è –≤—ñ–¥ frontend
 */

const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const WebSocket = require('ws');
const cors = require('cors');
const axios = require('axios');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8312305494:AAFIt10m3YcbFb2d3t9Rq57WonbtAJ1o1-0';
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000';
const PORT = process.env.PORT || 5000;

// –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ –∑ webhook
const bot = new TelegramBot(TOKEN, { polling: false });

// WebSocket —Å–µ—Ä–≤–µ—Ä–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
let wssClients = new Set();

// Express –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –≤–µ–±—Ö—É–∫—ñ–≤ —Ç–∞ API
const app = express();
app.use(cors());
app.use(express.json());

// –í–µ–±—Ö—É–∫ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –≤—ñ–¥ Telegram
app.post(`/webhook/${TOKEN.split(':')[0]}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–≤'—è–∑–∫—É –∑ frontend
app.get('/health', (req, res) => {
  res.json({
    status: 'Bot backend active',
    frontend_url: FRONTEND_URL,
    websocket_clients: wssClients.size,
    timestamp: new Date().toISOString()
  });
});

// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
const wss = new WebSocket.Server({ server: app.listen(PORT) });

wss.on('connection', (ws) => {
  console.log('WebSocket client connected');
  wssClients.add(ws);

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      handleWebSocketMessage(ws, data);
    } catch (err) {
      console.error('WebSocket message error:', err);
    }
  });

  ws.on('close', () => {
    console.log('WebSocket client disconnected');
    wssClients.delete(ws);
  });
});

// –û–±—Ä–æ–±–∫–∞ WebSocket –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function handleWebSocketMessage(ws, data) {
  switch (data.type) {
    case 'vote':
      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥–æ–ª–æ—Å –Ω–∞ frontend
      broadcastVote(data.vote);
      break;
    case 'ping':
      ws.send(JSON.stringify({ type: 'pong', timestamp: Date.now() }));
      break;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó –≥–æ–ª–æ—Å—ñ–≤ –Ω–∞ –≤—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏
function broadcastVote(vote) {
  const message = JSON.stringify({
    type: 'vote_update',
    vote,
    timestamp: new Date().toISOString()
  });

  wssClients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message);
    }
  });
}

// TELEGRAM BOT –û–ë–†–û–ë–ù–ò–ö–ò

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeText = `
ü§ñ –ë–û–¢ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ì–û–õ–û–°–£–í–ê–ù–ù–Ø–ú

‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ —Å–∏—Å—Ç–µ–º–∏
üîÑ –†–µ–∞–ª—å–Ω–∏–π —á–∞—Å: ${wssClients.size} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –æ–Ω–ª–∞–π–Ω
üåê Frontend: ${FRONTEND_URL}

–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:
`;

  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
          { text: 'üë• –£—á–∞—Å–Ω–∏–∫–∏', callback_data: 'participants' }
        ],
        [
          { text: 'üë∂ –î—ñ—Ç–∏', callback_data: 'children' },
          { text: 'üí∞ –§–æ–Ω–¥–∏', callback_data: 'funds' }
        ],
        [
          { text: 'üéØ –ñ–∏–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä', callback_data: 'monitor' }
        ]
      ]
    }
  };

  bot.sendMessage(chatId, welcomeText, options);
});

// –û–±—Ä–æ–±–∫–∞ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É callback
  bot.answerCallbackQuery(query.id);

  switch (data) {
    case 'stats':
      sendStats(chatId);
      break;
    case 'participants':
      sendParticipants(chatId);
      break;
    case 'children':
      sendChildren(chatId);
      break;
    case 'funds':
      sendFunds(chatId);
      break;
    case 'monitor':
      startMonitor(chatId);
      break;
  }
});

// –§—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö
async function sendStats(chatId) {
  try {
    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ frontend API
    const response = await axios.get(`${FRONTEND_URL}/api/stats`, { timeout: 5000 });
    const data = response.data;

    const text = `
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–ò

üìà –ó–∞–≥–∞–ª—å–Ω–∞ –º–µ—Ç–∞: ${data.totalTarget || 'N/A'} –≥—Ä–∏–≤–µ–Ω—å
üí∞ –ó—ñ–±—Ä–∞–Ω–æ: ${data.totalDonated || 0} –≥—Ä–∏–≤–µ–Ω—å
üìä –ü—Ä–æ–≥—Ä–µ—Å: ${data.totalProgress || 0}%

üë∂ –î—ñ—Ç–µ–π: ${data.totalChildren || 0}
üî¥ –¢–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö: ${data.urgentChildren || 0}

üåê –û–Ω–ª–∞–π–Ω –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${wssClients.size}

üïê ${new Date().toLocaleString('uk-UA')}
`;

    bot.sendMessage(chatId, text);
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${error.message}`);
  }
}

async function sendParticipants(chatId) {
  try {
    const response = await axios.get(`${FRONTEND_URL}/api/logs`, { timeout: 5000 });
    const data = response.data;
    const logs = data.logs || [];

    if (!logs.length) {
      bot.sendMessage(chatId, 'üìù –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è');
      return;
    }

    const recent = logs.slice(0, 10);
    let text = `üë• –û–°–¢–ê–ù–ù–Ü –£–ß–ê–°–ù–ò–ö–ò (${logs.length} –∑–∞–≥–∞–ª–æ–º):\n\n`;

    recent.forEach((log, i) => {
      const time = new Date(log.timestamp).toLocaleTimeString('uk-UA');
      const phone = log.phone ? `***${log.phone.slice(-3)}` : 'N/A';
      text += `${i + 1}. ${time} - ${phone}\n`;
    });

    bot.sendMessage(chatId, text);
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤: ${error.message}`);
  }
}

async function sendChildren(chatId) {
  try {
    const response = await axios.get(`${FRONTEND_URL}/api/children`, { timeout: 5000 });
    const data = response.data;
    const children = data.children || [];

    if (!children.length) {
      bot.sendMessage(chatId, 'üë∂ –°–ø–∏—Å–æ–∫ –¥—ñ—Ç–µ–π –ø–æ—Ä–æ–∂–Ω—ñ–π');
      return;
    }

    let text = `üë∂ –í–°–Ü –î–Ü–¢–ò (${children.length}):\n\n`;

    children.forEach((child, i) => {
      const status = child.urgent ? 'üî¥' : 'üü°';
      text += `${status} ${child.name}, ${child.age}—Ä. - ${child.diagnosis}\n`;
      text += `üí∞ –ü–æ—Ç—Ä—ñ–±–Ω–æ: ${child.treatmentCost}–≥—Ä–Ω\n\n`;
    });

    bot.sendMessage(chatId, text);
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥—ñ—Ç–µ–π: ${error.message}`);
  }
}

async function sendFunds(chatId) {
  try {
    const response = await axios.get(`${FRONTEND_URL}/api/children`, { timeout: 5000 });
    const data = response.data;
    const children = data.children || [];

    const totalDonated = children.reduce((sum, c) => sum + (c.donated || 0), 0);
    const totalTarget = children.reduce((sum, c) => sum + (c.treatmentCost || 0), 0);
    const progress = totalTarget > 0 ? Math.round((totalDonated / totalTarget) * 100) : 0;

    const text = `
üí∞ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –§–û–ù–î–ò

üíµ –ó—ñ–±—Ä–∞–Ω–æ: ${totalDonated.toLocaleString()} –≥—Ä–∏–≤–µ–Ω—å
üéØ –ú–µ—Ç–∞: ${totalTarget.toLocaleString()} –≥—Ä–∏–≤–µ–Ω—å
üìä –ü—Ä–æ–≥—Ä–µ—Å: ${progress}%

üìà –î–µ—Ç–∞–ª—ñ –ø–æ –¥—ñ—Ç—è–º –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ...
`;

    bot.sendMessage(chatId, text);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ –¥—ñ—Ç—è–º
    let details = 'üìä –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø –ü–û –î–Ü–¢–Ø–ú:\n\n';
    children.forEach((child, i) => {
      const childProgress = child.treatmentCost > 0 ?
        Math.round((child.donated / child.treatmentCost) * 100) : 0;
      details += `${i + 1}. ${child.name}\n`;
      details += `   ${child.donated}/${child.treatmentCost}–≥—Ä–Ω (${childProgress}%)\n\n`;
    });

    setTimeout(() => bot.sendMessage(chatId, details), 500);

  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ–Ω–¥–∏: ${error.message}`);
  }
}

function startMonitor(chatId) {
  const text = `
üéØ –ñ–ò–í–ò–ô –ú–û–ù–Ü–¢–û–† –ó–ê–ü–£–©–ï–ù–û

‚ö° –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
üö´ –©–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏: /stop

–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –±—É–¥–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...
`;

  bot.sendMessage(chatId, text);

  // –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
  const monitorInterval = setInterval(async () => {
    try {
      const statsText = `
üéØ –ú–û–ù–Ü–¢–û–† –°–ò–°–¢–ï–ú–ò

üïê ${new Date().toLocaleTimeString('uk-UA')}

üåê WebSocket –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${wssClients.size}
ü§ñ Bot –∞–∫—Ç–∏–≤–Ω–∏–π ‚úÖ

–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –∑–∞—Ä–∞–∑
`;

      // –ù–∞–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      bot.sendMessage(chatId, statsText, {
        reply_markup: {
          inline_keyboard: [[{ text: '‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä', callback_data: 'stop_monitor' }]]
        }
      });
    } catch (error) {
      console.error('Monitor error:', error);
    }
  }, 30000);

  // –ó—É–ø–∏–Ω—è—î–º–æ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
  setTimeout(() => {
    clearInterval(monitorInterval);
    bot.sendMessage(chatId, 'üéØ –ú–æ–Ω—ñ—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω');
  }, 300000);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
bot.on('callback_query', (query) => {
  if (query.data === 'stop_monitor') {
    bot.answerCallbackQuery(query.id, '–ú–æ–Ω—ñ—Ç–æ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
    bot.sendMessage(query.message.chat.id, '‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
  }
});

// –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –ó FRONTEND –ß–ï–†–ï–ó WEBHOOKS

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å frontend
function sendToFrontend(type, data) {
  const message = { type, data, timestamp: new Date().toISOString() };
  broadcastVote({ type: 'bot_message', ...message });
}

// –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text && text.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏

  // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è frontend
  sendToFrontend('bot_message', {
    chatId,
    text,
    from: msg.from.first_name,
    timestamp: msg.date
  });
});

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
const WEBHOOK_URL = process.env.WEBHOOK_URL || `https://your-domain.com/webhook/${TOKEN.split(':')[0]}`;

async function setupWebhook() {
  try {
    const webhookInfo = await bot.setWebHook(WEBHOOK_URL);
    console.log('Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π:', webhookInfo);
  } catch (error) {
    console.log('Webhook –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º):', error.message);
  }
}

// –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê
async function start() {
  console.log('ü§ñ Telegram Bot Backend starting...');

  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –¥–ª—è production
  if (process.env.NODE_ENV === 'production') {
    await setupWebhook();
  }

  console.log('‚úÖ Telegram Bot Backend active!');
  console.log(`üì° Webhook: ${WEBHOOK_URL}`);
  console.log(`üåê Frontend: ${FRONTEND_URL}`);
  console.log(`üîå WebSocket Port: ${PORT}`);
  console.log(`üë• Connected clients: ${wssClients.size}`);
}

start().catch(console.error);

module.exports = { bot, wssClients, broadcastVote, sendToFrontend };
