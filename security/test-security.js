#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

const SecurityManager = require('./security-manager');
const fs = require('fs');
const path = require('path');

class SecurityTester {
    constructor() {
        this.tests = [];
        this.results = [];
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç
     */
    addTest(name, testFunction) {
        this.tests.push({ name, testFunction });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
     */
    async runTests() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...\n');
        
        for (const test of this.tests) {
            try {
                console.log(`üîç –¢–µ—Å—Ç: ${test.name}`);
                const result = await test.testFunction();
                this.results.push({
                    name: test.name,
                    status: result ? 'PASS' : 'FAIL',
                    result
                });
                console.log(`‚úÖ ${test.name}: ${result ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}\n`);
            } catch (error) {
                this.results.push({
                    name: test.name,
                    status: 'ERROR',
                    error: error.message
                });
                console.log(`‚ùå ${test.name}: –û–®–ò–ë–ö–ê - ${error.message}\n`);
            }
        }
        
        this.printSummary();
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    printSummary() {
        console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('=====================================');
        
        const passed = this.results.filter(r => r.status === 'PASS').length;
        const failed = this.results.filter(r => r.status === 'FAIL').length;
        const errors = this.results.filter(r => r.status === 'ERROR').length;
        const total = this.results.length;
        
        console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
        console.log(`üö® –û—à–∏–±–æ–∫: ${errors}`);
        console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passed / total) * 100).toFixed(1)}%\n`);
        
        if (failed > 0 || errors > 0) {
            console.log('‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:');
            this.results
                .filter(r => r.status !== 'PASS')
                .forEach(r => {
                    console.log(`  - ${r.name}: ${r.status}`);
                    if (r.error) {
                        console.log(`    –û—à–∏–±–∫–∞: ${r.error}`);
                    }
                });
        }
        
        console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (passed === total) {
            console.log('  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
        } else {
            console.log('  ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.');
            console.log('  üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
            console.log('  üìö –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.');
        }
    }
}

async function runSecurityTests() {
    const tester = new SecurityTester();
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    tester.addTest('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã', async () => {
        const configPath = path.join(__dirname, 'config.json');
        return fs.existsSync(configPath);
    });
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    tester.addTest('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', async () => {
        const requiredVars = [
            'TELEGRAM_ALERT_BOT_TOKEN',
            'TELEGRAM_ALERT_CHAT_ID'
        ];
        
        return requiredVars.every(varName => process.env[varName]);
    });
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    tester.addTest('–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞', async () => {
        const requiredDirs = [
            './backups',
            './data',
            './security'
        ];
        
        return requiredDirs.every(dir => fs.existsSync(dir));
    });
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
    tester.addTest('–°–µ—Ç–µ–≤–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å', async () => {
        const https = require('https');
        
        return new Promise((resolve) => {
            const req = https.request('https://www.google.com', { timeout: 5000 }, (res) => {
                resolve(res.statusCode === 200);
            });
            
            req.on('error', () => resolve(false));
            req.on('timeout', () => {
                req.destroy();
                resolve(false);
            });
            
            req.end();
        });
    });
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
    tester.addTest('Telegram API', async () => {
        const botToken = process.env.TELEGRAM_ALERT_BOT_TOKEN;
        if (!botToken) return false;
        
        const https = require('https');
        
        return new Promise((resolve) => {
            const url = `https://api.telegram.org/bot${botToken}/getMe`;
            const req = https.request(url, { timeout: 10000 }, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                    try {
                        const result = JSON.parse(data);
                        resolve(result.ok === true);
                    } catch {
                        resolve(false);
                    }
                });
            });
            
            req.on('error', () => resolve(false));
            req.on('timeout', () => {
                req.destroy();
                resolve(false);
            });
            
            req.end();
        });
    });
    
    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    tester.addTest('Docker', async () => {
        const { exec } = require('child_process');
        
        return new Promise((resolve) => {
            exec('docker --version', (error, stdout, stderr) => {
                resolve(!error && stdout.includes('Docker version'));
            });
        });
    });
    
    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    tester.addTest('Docker Compose', async () => {
        const { exec } = require('child_process');
        
        return new Promise((resolve) => {
            exec('docker-compose --version', (error, stdout, stderr) => {
                resolve(!error && stdout.includes('docker-compose version'));
            });
        });
    });
    
    // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    tester.addTest('–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞', async () => {
        try {
            const testFile = './security/test-write.tmp';
            fs.writeFileSync(testFile, 'test');
            fs.unlinkSync(testFile);
            return true;
        } catch {
            return false;
        }
    });
    
    // –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    tester.addTest('–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å', async () => {
        const { exec } = require('child_process');
        
        return new Promise((resolve) => {
            exec('free -m', (error, stdout, stderr) => {
                if (error) {
                    resolve(false);
                    return;
                }
                
                const lines = stdout.split('\n');
                if (lines.length > 1) {
                    const parts = lines[1].split(/\s+/);
                    const total = parseInt(parts[1]);
                    const used = parseInt(parts[2]);
                    const available = total - used;
                    
                    // –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 512MB —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏
                    resolve(available >= 512);
                } else {
                    resolve(false);
                }
            });
        });
    });
    
    // –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    tester.addTest('–î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', async () => {
        const { exec } = require('child_process');
        
        return new Promise((resolve) => {
            exec('df -h .', (error, stdout, stderr) => {
                if (error) {
                    resolve(false);
                    return;
                }
                
                const lines = stdout.split('\n');
                if (lines.length > 1) {
                    const parts = lines[1].split(/\s+/);
                    const usedPercent = parseInt(parts[4].replace('%', ''));
                    
                    // –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 10% —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
                    resolve(usedPercent < 90);
                } else {
                    resolve(false);
                }
            });
        });
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await tester.runTests();
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runSecurityTests().catch((error) => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });
}

module.exports = { SecurityTester, runSecurityTests };
