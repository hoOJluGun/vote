#!/usr/bin/env node

/**
 * –°–∏—Å—Ç–µ–º–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–ª—é—á–µ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤, API –∫–ª—é—á–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ä–µ—Ç—ã
 */

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const https = require('https');
const { exec } = require('child_process');

class TokenRotationSystem {
    constructor(config) {
        this.config = {
            rotationInterval: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
            backupTokens: 3, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            alertChannels: [],
            ...config
        };
        
        this.tokens = new Map();
        this.rotationHistory = [];
        this.isRotating = false;
        
        this.loadExistingTokens();
        this.startRotationSchedule();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
     */
    loadExistingTokens() {
        const tokensFile = './security/tokens.json';
        if (fs.existsSync(tokensFile)) {
            try {
                const data = JSON.parse(fs.readFileSync(tokensFile, 'utf8'));
                this.tokens = new Map(Object.entries(data));
                console.log('‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª
     */
    saveTokens() {
        const tokensFile = './security/tokens.json';
        const tokensDir = path.dirname(tokensFile);
        
        if (!fs.existsSync(tokensDir)) {
            fs.mkdirSync(tokensDir, { recursive: true });
        }

        const data = Object.fromEntries(this.tokens);
        fs.writeFileSync(tokensFile, JSON.stringify(data, null, 2));
        console.log('üíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏
     */
    startRotationSchedule() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤...');
        
        setInterval(() => {
            this.performRotation();
        }, this.config.rotationInterval);

        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ 1 —á–∞—Å
        setTimeout(() => {
            this.performRotation();
        }, 60 * 60 * 1000);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–æ—Ç–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
     */
    async performRotation() {
        if (this.isRotating) {
            console.log('‚è≥ –†–æ—Ç–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return;
        }

        this.isRotating = true;
        console.log('üîÑ –ù–∞—á–∞–ª–æ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤...');

        try {
            // –†–æ—Ç–∞—Ü–∏—è Telegram –±–æ—Ç–æ–≤
            await this.rotateTelegramBots();
            
            // –†–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–µ–π
            await this.rotateAPIKeys();
            
            // –†–æ—Ç–∞—Ü–∏—è JWT —Å–µ–∫—Ä–µ—Ç–æ–≤
            await this.rotateJWTSecrets();
            
            // –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            await this.rotateEncryptionKeys();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await this.updateConfiguration();
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            await this.notifyTeam();
            
            console.log('‚úÖ –†–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
            await this.sendAlert(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`);
        } finally {
            this.isRotating = false;
        }
    }

    /**
     * –†–æ—Ç–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–æ–≤
     */
    async rotateTelegramBots() {
        console.log('ü§ñ –†–æ—Ç–∞—Ü–∏—è Telegram –±–æ—Ç–æ–≤...');
        
        const botConfigs = [
            { name: 'main_bot', purpose: '–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è' },
            { name: 'alert_bot', purpose: '–ë–æ—Ç –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã' },
            { name: 'backup_bot', purpose: '–†–µ–∑–µ—Ä–≤–Ω—ã–π –±–æ—Ç' }
        ];

        for (const botConfig of botConfigs) {
            try {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
                const newBot = await this.createNewTelegramBot(botConfig);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
                const oldToken = this.tokens.get(botConfig.name);
                if (oldToken) {
                    await this.addBackupToken(botConfig.name, oldToken);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                this.tokens.set(botConfig.name, newBot.token);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º webhook
                await this.updateTelegramWebhook(newBot.token);
                
                console.log(`‚úÖ –ë–æ—Ç ${botConfig.name} –æ–±–Ω–æ–≤–ª–µ–Ω`);
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞ ${botConfig.name}:`, error);
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞
     */
    async createNewTelegramBot(config) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API BotFather
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
        const token = this.generateSecureToken(35);
        
        return {
            token,
            username: `vote_bot_${Date.now()}`,
            config
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç webhook Telegram –±–æ—Ç–∞
     */
    async updateTelegramWebhook(token) {
        const webhookUrl = `${process.env.BOT_BASE_URL}/webhook`;
        
        const data = JSON.stringify({
            url: webhookUrl,
            max_connections: 100,
            allowed_updates: ['message', 'callback_query']
        });

        return new Promise((resolve, reject) => {
            const url = `https://api.telegram.org/bot${token}/setWebhook`;
            const req = https.request(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': data.length
                }
            }, (res) => {
                let responseData = '';
                res.on('data', chunk => responseData += chunk);
                res.on('end', () => {
                    try {
                        const result = JSON.parse(responseData);
                        if (result.ok) {
                            resolve(result);
                        } else {
                            reject(new Error(result.description));
                        }
                    } catch (error) {
                        reject(error);
                    }
                });
            });

            req.on('error', reject);
            req.write(data);
            req.end();
        });
    }

    /**
     * –†–æ—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á–∏
     */
    async rotateAPIKeys() {
        console.log('üîë –†–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–µ–π...');
        
        const apiKeys = [
            'database_key',
            'external_api_key',
            'payment_gateway_key',
            'email_service_key'
        ];

        for (const keyName of apiKeys) {
            try {
                const oldKey = this.tokens.get(keyName);
                if (oldKey) {
                    await this.addBackupToken(keyName, oldKey);
                }
                
                const newKey = this.generateSecureToken(64);
                this.tokens.set(keyName, newKey);
                
                console.log(`‚úÖ API –∫–ª—é—á ${keyName} –æ–±–Ω–æ–≤–ª–µ–Ω`);
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–∞ ${keyName}:`, error);
            }
        }
    }

    /**
     * –†–æ—Ç–∏—Ä—É–µ—Ç JWT —Å–µ–∫—Ä–µ—Ç—ã
     */
    async rotateJWTSecrets() {
        console.log('üîê –†–æ—Ç–∞—Ü–∏—è JWT —Å–µ–∫—Ä–µ—Ç–æ–≤...');
        
        const jwtSecrets = [
            'access_token_secret',
            'refresh_token_secret',
            'admin_token_secret'
        ];

        for (const secretName of jwtSecrets) {
            try {
                const oldSecret = this.tokens.get(secretName);
                if (oldSecret) {
                    await this.addBackupToken(secretName, oldSecret);
                }
                
                const newSecret = this.generateSecureToken(128);
                this.tokens.set(secretName, newSecret);
                
                console.log(`‚úÖ JWT —Å–µ–∫—Ä–µ—Ç ${secretName} –æ–±–Ω–æ–≤–ª–µ–Ω`);
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–∞ ${secretName}:`, error);
            }
        }
    }

    /**
     * –†–æ—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
     */
    async rotateEncryptionKeys() {
        console.log('üîí –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...');
        
        const encryptionKeys = [
            'data_encryption_key',
            'backup_encryption_key',
            'communication_key'
        ];

        for (const keyName of encryptionKeys) {
            try {
                const oldKey = this.tokens.get(keyName);
                if (oldKey) {
                    await this.addBackupToken(keyName, oldKey);
                }
                
                const newKey = crypto.randomBytes(32).toString('hex');
                this.tokens.set(keyName, newKey);
                
                console.log(`‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ${keyName} –æ–±–Ω–æ–≤–ª–µ–Ω`);
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–∞ ${keyName}:`, error);
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤
     */
    async addBackupToken(name, token) {
        const backupKey = `${name}_backup_${Date.now()}`;
        this.tokens.set(backupKey, token);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        const backupTokens = Array.from(this.tokens.keys())
            .filter(key => key.startsWith(`${name}_backup_`))
            .sort()
            .reverse();
        
        if (backupTokens.length > this.config.backupTokens) {
            const tokensToRemove = backupTokens.slice(this.config.backupTokens);
            tokensToRemove.forEach(key => this.tokens.delete(key));
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω
     */
    generateSecureToken(length) {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        
        for (let i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        
        return result;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    async updateConfiguration() {
        console.log('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        await this.updateEnvFile();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º docker-compose —Ñ–∞–π–ª—ã
        await this.updateDockerCompose();
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        await this.restartServices();
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª
     */
    async updateEnvFile() {
        const envFile = '.env';
        if (!fs.existsSync(envFile)) {
            return;
        }

        let content = fs.readFileSync(envFile, 'utf8');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ
        for (const [name, token] of this.tokens) {
            if (!name.includes('_backup_')) {
                const regex = new RegExp(`^${name}=.*$`, 'm');
                if (regex.test(content)) {
                    content = content.replace(regex, `${name}=${token}`);
                } else {
                    content += `\n${name}=${token}`;
                }
            }
        }
        
        fs.writeFileSync(envFile, content);
        console.log('‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç docker-compose —Ñ–∞–π–ª—ã
     */
    async updateDockerCompose() {
        const composeFiles = [
            'docker-compose.frontend.yml',
            'docker-compose.bot.yml'
        ];

        for (const file of composeFiles) {
            if (fs.existsSync(file)) {
                let content = fs.readFileSync(file, 'utf8');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ docker-compose
                for (const [name, token] of this.tokens) {
                    if (!name.includes('_backup_')) {
                        const regex = new RegExp(`\\$\\{${name}\\}`, 'g');
                        content = content.replace(regex, token);
                    }
                }
                
                fs.writeFileSync(file, content);
                console.log(`‚úÖ ${file} –æ–±–Ω–æ–≤–ª–µ–Ω`);
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã
     */
    async restartServices() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...');
        
        return new Promise((resolve, reject) => {
            const command = 'docker-compose down && docker-compose up -d';
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                } else {
                    console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã');
                    resolve(stdout);
                }
            });
        });
    }

    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É
     */
    async notifyTeam() {
        const message = `üîÑ –†–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω—ã: ${Array.from(this.tokens.keys()).filter(k => !k.includes('_backup_')).join(', ')}`;
        await this.sendAlert(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç
     */
    async sendAlert(message) {
        console.log(`üì¢ –ê–õ–ï–†–¢: ${message}`);
        
        for (const channel of this.config.alertChannels) {
            try {
                switch (channel.type) {
                    case 'telegram':
                        await this.sendTelegramAlert(channel.config, message);
                        break;
                    case 'webhook':
                        await this.sendWebhookAlert(channel.config, message);
                        break;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ ${channel.type}:`, error);
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Telegram –∞–ª–µ—Ä—Ç
     */
    async sendTelegramAlert(config, message) {
        const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
        const data = JSON.stringify({
            chat_id: config.chatId,
            text: message,
            parse_mode: 'HTML'
        });

        return new Promise((resolve, reject) => {
            const req = https.request(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': data.length
                }
            }, (res) => {
                resolve(res);
            });

            req.on('error', reject);
            req.write(data);
            req.end();
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –∞–ª–µ—Ä—Ç
     */
    async sendWebhookAlert(config, message) {
        const data = JSON.stringify({
            message,
            timestamp: new Date().toISOString(),
            type: 'token_rotation'
        });

        return new Promise((resolve, reject) => {
            const req = https.request(config.url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': data.length
                }
            }, (res) => {
                resolve(res);
            });

            req.on('error', reject);
            req.write(data);
            req.end();
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–æ—Ç–∞—Ü–∏–∏
     */
    getRotationStatus() {
        return {
            isRotating: this.isRotating,
            lastRotation: this.rotationHistory[this.rotationHistory.length - 1],
            nextRotation: new Date(Date.now() + this.config.rotationInterval),
            activeTokens: Array.from(this.tokens.keys()).filter(k => !k.includes('_backup_')),
            backupTokens: Array.from(this.tokens.keys()).filter(k => k.includes('_backup_')).length
        };
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è
     */
    async forceRotation() {
        console.log('üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤...');
        await this.performRotation();
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
     */
    async restoreFromBackup(tokenName) {
        const backupTokens = Array.from(this.tokens.keys())
            .filter(key => key.startsWith(`${tokenName}_backup_`))
            .sort()
            .reverse();

        if (backupTokens.length > 0) {
            const backupToken = backupTokens[0];
            const token = this.tokens.get(backupToken);
            
            this.tokens.set(tokenName, token);
            this.tokens.delete(backupToken);
            
            await this.updateConfiguration();
            console.log(`‚úÖ –¢–æ–∫–µ–Ω ${tokenName} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞`);
            
            return true;
        }
        
        return false;
    }
}

module.exports = TokenRotationSystem;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const config = {
        alertChannels: [
            {
                type: 'telegram',
                config: {
                    botToken: process.env.TELEGRAM_ALERT_BOT_TOKEN,
                    chatId: process.env.TELEGRAM_ALERT_CHAT_ID
                }
            }
        ]
    };

    const rotation = new TokenRotationSystem(config);
    
    // Graceful shutdown
    process.on('SIGINT', () => {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤...');
        rotation.saveTokens();
        process.exit(0);
    });
}
