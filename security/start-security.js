#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

const SecurityManager = require('./security-manager');
const fs = require('fs');
const path = require('path');

async function startSecuritySystem() {
    console.log('üõ°Ô∏è –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const configPath = path.join(__dirname, 'config.json');
        let config = {};
        
        if (fs.existsSync(configPath)) {
            config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } else {
            console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –∞–ª–µ—Ä—Ç–æ–≤
        const alertChannels = [];
        
        // Telegram –∞–ª–µ—Ä—Ç—ã
        if (process.env.TELEGRAM_ALERT_BOT_TOKEN && process.env.TELEGRAM_ALERT_CHAT_ID) {
            alertChannels.push({
                type: 'telegram',
                config: {
                    botToken: process.env.TELEGRAM_ALERT_BOT_TOKEN,
                    chatId: process.env.TELEGRAM_ALERT_CHAT_ID
                }
            });
            console.log('‚úÖ Telegram –∞–ª–µ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }
        
        // Webhook –∞–ª–µ—Ä—Ç—ã
        if (process.env.WEBHOOK_ALERT_URL) {
            alertChannels.push({
                type: 'webhook',
                config: {
                    url: process.env.WEBHOOK_ALERT_URL,
                    headers: {
                        'Authorization': `Bearer ${process.env.WEBHOOK_ALERT_TOKEN || ''}`
                    }
                }
            });
            console.log('‚úÖ Webhook –∞–ª–µ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const securityManager = new SecurityManager({
            enableMonitoring: config.security?.monitoring?.enabled !== false,
            enableTokenRotation: config.security?.tokenRotation?.enabled !== false,
            enableAutoRecovery: config.security?.autoRecovery?.enabled !== false,
            alertChannels
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (config.domains?.primary) {
            if (config.domains.primary.web) {
                securityManager.addDomain(config.domains.primary.web, 'web');
            }
            if (config.domains.primary.bot) {
                securityManager.addDomain(config.domains.primary.bot, 'bot');
            }
            if (config.domains.primary.api) {
                securityManager.addDomain(config.domains.primary.api, 'api');
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (process.env.WEB_DOMAIN) {
            securityManager.addDomain(process.env.WEB_DOMAIN, 'web');
        }
        if (process.env.BOT_DOMAIN) {
            securityManager.addDomain(process.env.BOT_DOMAIN, 'bot');
        }
        if (process.env.API_DOMAIN) {
            securityManager.addDomain(process.env.API_DOMAIN, 'api');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (config.services?.monitoring) {
            for (const service of config.services.monitoring) {
                if (service.type === 'custom' && service.checkFunction) {
                    const checkFunction = getCheckFunction(service.checkFunction);
                    if (checkFunction) {
                        securityManager.addService(service.name, checkFunction);
                    }
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        securityManager.addService('database', checkDatabase);
        securityManager.addService('file_system', checkFileSystem);
        securityManager.addService('disk_space', checkDiskSpace);
        
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ
        setTimeout(() => {
            const status = securityManager.getSecurityStatus();
            console.log('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', JSON.stringify(status, null, 2));
        }, 5000);
        
        return securityManager;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
        process.exit(1);
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∏–º–µ–Ω–∏
 */
function getCheckFunction(functionName) {
    const checkFunctions = {
        checkDatabase,
        checkFileSystem,
        checkDiskSpace,
        checkNetwork,
        checkMemory
    };
    
    return checkFunctions[functionName] || null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDatabase() {
    try {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
 */
async function checkFileSystem() {
    try {
        const criticalPaths = [
            './data',
            './backups',
            './security',
            './link',
            './bot'
        ];
        
        for (const path of criticalPaths) {
            if (!fs.existsSync(path)) {
                console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${path}`);
                return false;
            }
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
 */
async function checkDiskSpace() {
    try {
        const { exec } = require('child_process');
        
        return new Promise((resolve) => {
            exec('df -h .', (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞:', error);
                    resolve(false);
                    return;
                }
                
                // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ df
                const lines = stdout.split('\n');
                if (lines.length > 1) {
                    const parts = lines[1].split(/\s+/);
                    const usedPercent = parseInt(parts[4].replace('%', ''));
                    
                    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª—å—à–µ 90%, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–æ–π
                    resolve(usedPercent < 90);
                } else {
                    resolve(false);
                }
            });
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞:', error);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å
 */
async function checkNetwork() {
    try {
        const https = require('https');
        
        return new Promise((resolve) => {
            const req = https.request('https://www.google.com', { timeout: 5000 }, (res) => {
                resolve(res.statusCode === 200);
            });
            
            req.on('error', () => resolve(false));
            req.on('timeout', () => {
                req.destroy();
                resolve(false);
            });
            
            req.end();
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏:', error);
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
 */
async function checkMemory() {
    try {
        const { exec } = require('child_process');
        
        return new Promise((resolve) => {
            exec('free -m', (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏:', error);
                    resolve(false);
                    return;
                }
                
                // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ free
                const lines = stdout.split('\n');
                if (lines.length > 1) {
                    const parts = lines[1].split(/\s+/);
                    const total = parseInt(parts[1]);
                    const used = parseInt(parts[2]);
                    const usedPercent = (used / total) * 100;
                    
                    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª—å—à–µ 90%, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–æ–π
                    resolve(usedPercent < 90);
                } else {
                    resolve(false);
                }
            });
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏:', error);
        return false;
    }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    startSecuritySystem().then((securityManager) => {
        // Graceful shutdown
        process.on('SIGINT', async () => {
            console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
            await securityManager.shutdown();
            process.exit(0);
        });

        process.on('SIGTERM', async () => {
            console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
            await securityManager.shutdown();
            process.exit(0);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        process.on('uncaughtException', async (error) => {
            console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
            await securityManager.sendAlert(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
            await securityManager.shutdown();
            process.exit(1);
        });
        
        process.on('unhandledRejection', async (reason, promise) => {
            console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
            await securityManager.sendAlert(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞: ${reason}`);
        });
        
    }).catch((error) => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = { startSecuritySystem };
