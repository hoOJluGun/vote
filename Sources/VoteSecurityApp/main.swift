#!/usr/bin/env swift

import Foundation
import SwiftUI
import VoteSecurityCore
import VoteSecurityUI
import Logging

// MARK: - Main Application Entry Point

@main
struct VoteSecurityApp: App {
    @StateObject private var securityManager = SecurityManager()
    @StateObject private var monitoringService = MonitoringService()
    @StateObject private var tokenRotationService = TokenRotationService()
    @StateObject private var recoveryService = RecoveryService()
    
    private let logger = Logger(label: "VoteSecurityApp")
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .environmentObject(securityManager)
                .environmentObject(monitoringService)
                .environmentObject(tokenRotationService)
                .environmentObject(recoveryService)
                .onAppear {
                    setupApplication()
                }
        }
        .windowStyle(.automatic)
        .windowResizability(.contentSize)
        .commands {
            CommandGroup(replacing: .newItem) {
                Button("–ù–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥") {
                    createNewMonitoring()
                }
                .keyboardShortcut("n", modifiers: [.command])
            }
            
            CommandGroup(after: .toolbar) {
                Button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏") {
                    openSecuritySettings()
                }
                .keyboardShortcut(",", modifiers: [.command])
            }
        }
        
        // –ú–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        MenuBarExtra("Vote Security", systemImage: "shield.lefthalf.filled") {
            MenuBarView()
        }
        .menuBarExtraStyle(.window)
    }
    
    // MARK: - Application Setup
    
    private func setupApplication() {
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Vote Security")
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        Task {
            await securityManager.initialize()
            await monitoringService.start()
            await tokenRotationService.start()
            await recoveryService.initialize()
            
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        setupSignalHandling()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        setupNotifications()
    }
    
    private func setupSignalHandling() {
        signal(SIGINT) { _ in
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            Task {
                await securityManager.shutdown()
                exit(0)
            }
        }
        
        signal(SIGTERM) { _ in
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            Task {
                await securityManager.shutdown()
                exit(0)
            }
        }
    }
    
    private func setupNotifications() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
            if granted {
                logger.info("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ")
            } else {
                logger.warning("‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: \(error?.localizedDescription ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
            }
        }
    }
    
    // MARK: - Actions
    
    private func createNewMonitoring() {
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        Task {
            await monitoringService.createNewMonitoring()
        }
    }
    
    private func openSecuritySettings() {
        logger.info("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    }
}

// MARK: - Menu Bar View

struct MenuBarView: View {
    @EnvironmentObject var securityManager: SecurityManager
    @EnvironmentObject var monitoringService: MonitoringService
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            // –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            HStack {
                Image(systemName: securityManager.isRunning ? "checkmark.circle.fill" : "xmark.circle.fill")
                    .foregroundColor(securityManager.isRunning ? .green : .red)
                Text("–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                    .font(.headline)
                Spacer()
            }
            
            Divider()
            
            // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            Button("üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞") {
                showMonitoringStatus()
            }
            
            Button("üîÑ –†–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤") {
                rotateTokens()
            }
            
            Button("üö® –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è") {
                testRecovery()
            }
            
            Divider()
            
            Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏") {
                openSettings()
            }
            
            Button("‚ùå –í—ã—Ö–æ–¥") {
                NSApplication.shared.terminate(nil)
            }
        }
        .padding()
        .frame(width: 250)
    }
    
    private func showMonitoringStatus() {
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    }
    
    private func rotateTokens() {
        Task {
            await securityManager.rotateTokens()
        }
    }
    
    private func testRecovery() {
        Task {
            await securityManager.testRecovery()
        }
    }
    
    private func openSettings() {
        // –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    }
}

// MARK: - Content View

struct ContentView: View {
    @EnvironmentObject var securityManager: SecurityManager
    @EnvironmentObject var monitoringService: MonitoringService
    @EnvironmentObject var tokenRotationService: TokenRotationService
    @EnvironmentObject var recoveryService: RecoveryService
    
    @State private var selectedTab = 0
    
    var body: some View {
        NavigationSplitView {
            // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
            SidebarView(selectedTab: $selectedTab)
                .navigationSplitViewColumnWidth(min: 200, ideal: 250, max: 300)
        } detail: {
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            TabView(selection: $selectedTab) {
                MonitoringView()
                    .tabItem {
                        Label("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", systemImage: "chart.line.uptrend.xyaxis")
                    }
                    .tag(0)
                
                TokenRotationView()
                    .tabItem {
                        Label("–¢–æ–∫–µ–Ω—ã", systemImage: "key.rotational")
                    }
                    .tag(1)
                
                RecoveryView()
                    .tabItem {
                        Label("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", systemImage: "arrow.clockwise")
                    }
                    .tag(2)
                
                SettingsView()
                    .tabItem {
                        Label("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", systemImage: "gear")
                    }
                    .tag(3)
            }
        }
        .navigationTitle("Vote Security System")
        .toolbar {
            ToolbarItem(placement: .primaryAction) {
                Button(action: {
                    Task {
                        await securityManager.emergencyRecovery()
                    }
                }) {
                    Image(systemName: "exclamationmark.triangle.fill")
                        .foregroundColor(.red)
                }
                .help("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
            }
        }
    }
}

// MARK: - Sidebar View

struct SidebarView: View {
    @Binding var selectedTab: Int
    
    var body: some View {
        List(selection: $selectedTab) {
            Section("–û—Å–Ω–æ–≤–Ω—ã–µ") {
                Label("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", systemImage: "chart.line.uptrend.xyaxis")
                    .tag(0)
                
                Label("–¢–æ–∫–µ–Ω—ã", systemImage: "key.rotational")
                    .tag(1)
                
                Label("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", systemImage: "arrow.clockwise")
                    .tag(2)
            }
            
            Section("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") {
                Label("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", systemImage: "gear")
                    .tag(3)
                
                Label("–õ–æ–≥–∏", systemImage: "doc.text")
                    .tag(4)
                
                Label("–û—Ç—á–µ—Ç—ã", systemImage: "chart.bar.doc.horizontal")
                    .tag(5)
            }
        }
        .listStyle(SidebarListStyle())
    }
}

// MARK: - Monitoring View

struct MonitoringView: View {
    @EnvironmentObject var monitoringService: MonitoringService
    
    var body: some View {
        VStack {
            Text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
                .font(.largeTitle)
                .padding()
            
            // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2)) {
                ForEach(monitoringService.services, id: \.name) { service in
                    ServiceStatusCard(service: service)
                }
            }
            .padding()
            
            Spacer()
        }
    }
}

// MARK: - Token Rotation View

struct TokenRotationView: View {
    @EnvironmentObject var tokenRotationService: TokenRotationService
    
    var body: some View {
        VStack {
            Text("–†–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤")
                .font(.largeTitle)
                .padding()
            
            // –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
            List(tokenRotationService.tokens, id: \.name) { token in
                TokenRow(token: token)
            }
            
            Spacer()
        }
    }
}

// MARK: - Recovery View

struct RecoveryView: View {
    @EnvironmentObject var recoveryService: RecoveryService
    
    var body: some View {
        VStack {
            Text("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
                .font(.largeTitle)
                .padding()
            
            // –ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
            List(recoveryService.recoveryHistory, id: \.id) { recovery in
                RecoveryRow(recovery: recovery)
            }
            
            Spacer()
        }
    }
}

// MARK: - Settings View

struct SettingsView: View {
    @EnvironmentObject var securityManager: SecurityManager
    
    var body: some View {
        VStack {
            Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                .font(.largeTitle)
                .padding()
            
            Form {
                Section("Telegram") {
                    TextField("Bot Token", text: .constant(""))
                    TextField("Chat ID", text: .constant(""))
                }
                
                Section("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã") {
                    TextField("Vercel API Key", text: .constant(""))
                    TextField("AWS Access Key", text: .constant(""))
                }
            }
            .padding()
            
            Spacer()
        }
    }
}

// MARK: - Supporting Views

struct ServiceStatusCard: View {
    let service: MonitoringService.Service
    
    var body: some View {
        VStack(alignment: .leading) {
            HStack {
                Image(systemName: service.isHealthy ? "checkmark.circle.fill" : "xmark.circle.fill")
                    .foregroundColor(service.isHealthy ? .green : .red)
                Text(service.name)
                    .font(.headline)
                Spacer()
            }
            
            Text(service.status)
                .font(.caption)
                .foregroundColor(.secondary)
            
            Text("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: \(service.lastCheck, style: .relative)")
                .font(.caption2)
                .foregroundColor(.secondary)
        }
        .padding()
        .background(Color(NSColor.controlBackgroundColor))
        .cornerRadius(8)
    }
}

struct TokenRow: View {
    let token: TokenRotationService.Token
    
    var body: some View {
        HStack {
            VStack(alignment: .leading) {
                Text(token.name)
                    .font(.headline)
                Text("–û–±–Ω–æ–≤–ª–µ–Ω: \(token.lastUpdated, style: .relative)")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            Button("–û–±–Ω–æ–≤–∏—Ç—å") {
                // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
            }
            .buttonStyle(.bordered)
        }
    }
}

struct RecoveryRow: View {
    let recovery: RecoveryService.Recovery
    
    var body: some View {
        VStack(alignment: .leading) {
            HStack {
                Text("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ #\(recovery.id)")
                    .font(.headline)
                Spacer()
                Text(recovery.timestamp, style: .relative)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Text(recovery.reason)
                .font(.body)
            
            if let newDomains = recovery.newDomains {
                Text("–ù–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã: \(newDomains.joined(separator: ", "))")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
    }
}
