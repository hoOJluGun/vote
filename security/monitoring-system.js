#!/usr/bin/env node

/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Ö
 */

const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const crypto = require('crypto');

class SecurityMonitoringSystem {
    constructor(config) {
        this.config = {
            checkInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            maxFailures: 3,
            recoveryTimeout: 60000, // 1 –º–∏–Ω—É—Ç–∞
            backupInterval: 300000, // 5 –º–∏–Ω—É—Ç
            domains: [],
            services: [],
            alertChannels: [],
            ...config
        };
        
        this.failureCounts = new Map();
        this.lastBackup = Date.now();
        this.isRecovering = false;
        this.recoveryQueue = [];
        
        this.startMonitoring();
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–º–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    addDomain(domain, type = 'web') {
        this.config.domains.push({
            domain,
            type,
            lastCheck: null,
            status: 'unknown',
            failures: 0
        });
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    addService(name, checkFunction) {
        this.config.services.push({
            name,
            checkFunction,
            lastCheck: null,
            status: 'unknown',
            failures: 0
        });
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
     */
    addAlertChannel(type, config) {
        this.config.alertChannels.push({ type, config });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
     */
    startMonitoring() {
        console.log('üîç –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤
        setInterval(() => {
            this.checkDomains();
        }, this.config.checkInterval);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        setInterval(() => {
            this.checkServices();
        }, this.config.checkInterval);

        // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        setInterval(() => {
            this.createBackup();
        }, this.config.backupInterval);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        setInterval(() => {
            this.processRecoveryQueue();
        }, 10000);

        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤
     */
    async checkDomains() {
        for (const domainConfig of this.config.domains) {
            try {
                const isHealthy = await this.checkDomainHealth(domainConfig.domain);
                
                if (isHealthy) {
                    domainConfig.status = 'healthy';
                    domainConfig.failures = 0;
                    this.failureCounts.delete(domainConfig.domain);
                } else {
                    domainConfig.status = 'unhealthy';
                    domainConfig.failures++;
                    
                    if (domainConfig.failures >= this.config.maxFailures) {
                        await this.handleDomainFailure(domainConfig);
                    }
                }
                
                domainConfig.lastCheck = new Date();
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞ ${domainConfig.domain}:`, error.message);
                domainConfig.status = 'error';
                domainConfig.failures++;
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ–º–µ–Ω–∞
     */
    async checkDomainHealth(domain) {
        return new Promise((resolve) => {
            const options = {
                hostname: domain,
                port: 443,
                path: '/health',
                method: 'GET',
                timeout: 10000,
                rejectUnauthorized: false
            };

            const req = https.request(options, (res) => {
                resolve(res.statusCode === 200);
            });

            req.on('error', () => {
                resolve(false);
            });

            req.on('timeout', () => {
                req.destroy();
                resolve(false);
            });

            req.end();
        });
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±–æ–π –¥–æ–º–µ–Ω–∞
     */
    async handleDomainFailure(domainConfig) {
        console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –¥–æ–º–µ–Ω–∞: ${domainConfig.domain}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        await this.sendAlert(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –¥–æ–º–µ–Ω–∞ ${domainConfig.domain}. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        this.recoveryQueue.push({
            type: 'domain',
            config: domainConfig,
            timestamp: Date.now(),
            priority: 'high'
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä–≤–∏—Å—ã
     */
    async checkServices() {
        for (const service of this.config.services) {
            try {
                const isHealthy = await service.checkFunction();
                
                if (isHealthy) {
                    service.status = 'healthy';
                    service.failures = 0;
                } else {
                    service.status = 'unhealthy';
                    service.failures++;
                    
                    if (service.failures >= this.config.maxFailures) {
                        await this.handleServiceFailure(service);
                    }
                }
                
                service.lastCheck = new Date();
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ ${service.name}:`, error.message);
                service.status = 'error';
                service.failures++;
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±–æ–π —Å–µ—Ä–≤–∏—Å–∞
     */
    async handleServiceFailure(service) {
        console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π —Å–µ—Ä–≤–∏—Å–∞: ${service.name}`);
        
        await this.sendAlert(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π —Å–µ—Ä–≤–∏—Å–∞ ${service.name}. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`);
        
        this.recoveryQueue.push({
            type: 'service',
            config: service,
            timestamp: Date.now(),
            priority: 'high'
        });
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async processRecoveryQueue() {
        if (this.isRecovering || this.recoveryQueue.length === 0) {
            return;
        }

        this.isRecovering = true;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        this.recoveryQueue.sort((a, b) => {
            if (a.priority === 'high' && b.priority !== 'high') return -1;
            if (b.priority === 'high' && a.priority !== 'high') return 1;
            return a.timestamp - b.timestamp;
        });

        const recovery = this.recoveryQueue.shift();
        
        try {
            await this.executeRecovery(recovery);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                this.recoveryQueue.push(recovery);
            }, 60000);
        } finally {
            this.isRecovering = false;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    async executeRecovery(recovery) {
        console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${recovery.type}`);
        
        switch (recovery.type) {
            case 'domain':
                await this.recoverDomain(recovery.config);
                break;
            case 'service':
                await this.recoverService(recovery.config);
                break;
            default:
                console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', recovery.type);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ–º–µ–Ω
     */
    async recoverDomain(domainConfig) {
        console.log(`üåê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞: ${domainConfig.domain}`);
        
        // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω
        const newDomain = await this.generateNewDomain();
        
        // 2. –û–±–Ω–æ–≤–ª—è–µ–º DNS
        await this.updateDNS(newDomain);
        
        // 3. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–º –¥–æ–º–µ–Ω–µ
        await this.deployToNewDomain(newDomain);
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await this.updateConfiguration(domainConfig.domain, newDomain);
        
        // 5. –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await this.notifyTeam(newDomain);
        
        console.log(`‚úÖ –î–æ–º–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${newDomain}`);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω
     */
    async generateNewDomain() {
        const timestamp = Date.now();
        const random = crypto.randomBytes(4).toString('hex');
        return `vote-${timestamp}-${random}.example.com`;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç DNS
     */
    async updateDNS(newDomain) {
        console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DNS –¥–ª—è ${newDomain}`);
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DNS
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ DNS
    }

    /**
     * –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –Ω–∞ –Ω–æ–≤–æ–º –¥–æ–º–µ–Ω–µ
     */
    async deployToNewDomain(newDomain) {
        console.log(`üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º –¥–æ–º–µ–Ω–µ: ${newDomain}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const envUpdate = {
            WEB_DOMAIN: newDomain,
            BOT_DOMAIN: `bot-${newDomain}`
        };
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        await this.restartContainers(envUpdate);
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
     */
    async restartContainers(envVars) {
        return new Promise((resolve, reject) => {
            const command = `docker-compose down && docker-compose up -d`;
            exec(command, { env: { ...process.env, ...envVars } }, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                } else {
                    resolve(stdout);
                }
            });
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    async updateConfiguration(oldDomain, newDomain) {
        console.log(`‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${oldDomain} -> ${newDomain}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        const configFiles = [
            'docker-compose.frontend.yml',
            'docker-compose.bot.yml',
            '.env'
        ];
        
        for (const file of configFiles) {
            await this.updateConfigFile(file, oldDomain, newDomain);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
     */
    async updateConfigFile(filePath, oldDomain, newDomain) {
        try {
            if (fs.existsSync(filePath)) {
                let content = fs.readFileSync(filePath, 'utf8');
                content = content.replace(new RegExp(oldDomain, 'g'), newDomain);
                fs.writeFileSync(filePath, content);
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É
     */
    async notifyTeam(newDomain) {
        const message = `üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–º –¥–æ–º–µ–Ω–µ: ${newDomain}`;
        await this.sendAlert(message);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
     */
    async createBackup() {
        const backupDir = './backups';
        if (!fs.existsSync(backupDir)) {
            fs.mkdirSync(backupDir, { recursive: true });
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupFile = path.join(backupDir, `backup-${timestamp}.tar.gz`);

        return new Promise((resolve, reject) => {
            const command = `tar -czf ${backupFile} --exclude=node_modules --exclude=.git .`;
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                } else {
                    this.lastBackup = Date.now();
                    console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
                    resolve(backupFile);
                }
            });
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç
     */
    async sendAlert(message) {
        console.log(`üì¢ –ê–õ–ï–†–¢: ${message}`);
        
        for (const channel of this.config.alertChannels) {
            try {
                switch (channel.type) {
                    case 'telegram':
                        await this.sendTelegramAlert(channel.config, message);
                        break;
                    case 'email':
                        await this.sendEmailAlert(channel.config, message);
                        break;
                    case 'webhook':
                        await this.sendWebhookAlert(channel.config, message);
                        break;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ ${channel.type}:`, error);
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Telegram –∞–ª–µ—Ä—Ç
     */
    async sendTelegramAlert(config, message) {
        const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
        const data = JSON.stringify({
            chat_id: config.chatId,
            text: message,
            parse_mode: 'HTML'
        });

        return new Promise((resolve, reject) => {
            const req = https.request(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': data.length
                }
            }, (res) => {
                resolve(res);
            });

            req.on('error', reject);
            req.write(data);
            req.end();
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –∞–ª–µ—Ä—Ç
     */
    async sendEmailAlert(config, message) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        console.log(`üìß Email –∞–ª–µ—Ä—Ç: ${message}`);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –∞–ª–µ—Ä—Ç
     */
    async sendWebhookAlert(config, message) {
        const data = JSON.stringify({
            message,
            timestamp: new Date().toISOString(),
            level: 'critical'
        });

        return new Promise((resolve, reject) => {
            const req = https.request(config.url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': data.length
                }
            }, (res) => {
                resolve(res);
            });

            req.on('error', reject);
            req.write(data);
            req.end();
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
     */
    getSystemStatus() {
        return {
            domains: this.config.domains.map(d => ({
                domain: d.domain,
                status: d.status,
                lastCheck: d.lastCheck,
                failures: d.failures
            })),
            services: this.config.services.map(s => ({
                name: s.name,
                status: s.status,
                lastCheck: s.lastCheck,
                failures: s.failures
            })),
            recoveryQueue: this.recoveryQueue.length,
            isRecovering: this.isRecovering,
            lastBackup: this.lastBackup
        };
    }
}

module.exports = SecurityMonitoringSystem;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const config = {
        domains: [
            { domain: 'your-domain.com', type: 'web' }
        ],
        services: [
            {
                name: 'database',
                checkFunction: async () => {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    return true;
                }
            }
        ],
        alertChannels: [
            {
                type: 'telegram',
                config: {
                    botToken: process.env.TELEGRAM_ALERT_BOT_TOKEN,
                    chatId: process.env.TELEGRAM_ALERT_CHAT_ID
                }
            }
        ]
    };

    const monitoring = new SecurityMonitoringSystem(config);
    
    // Graceful shutdown
    process.on('SIGINT', () => {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        process.exit(0);
    });
}
