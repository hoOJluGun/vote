import Foundation
import AsyncHTTPClient
import Logging
import Crypto
import NIO
import Collections

// MARK: - Security Manager

@MainActor
public class SecurityManager: ObservableObject {
    // MARK: - Published Properties
    
    @Published public var isRunning = false
    @Published public var systemStatus: SystemStatus = .initializing
    @Published public var lastUpdate: Date = Date()
    @Published public var activeAlerts: [SecurityAlert] = []
    
    // MARK: - Private Properties
    
    private let logger = Logger(label: "SecurityManager")
    private let httpClient: HTTPClient
    private let monitoringService: MonitoringService
    private let tokenRotationService: TokenRotationService
    private let recoveryService: RecoveryService
    private let configuration: SecurityConfiguration
    
    private var monitoringTask: Task<Void, Never>?
    private var tokenRotationTask: Task<Void, Never>?
    private var alertTask: Task<Void, Never>?
    
    // MARK: - Initialization
    
    public init(configuration: SecurityConfiguration = SecurityConfiguration()) {
        self.configuration = configuration
        self.httpClient = HTTPClient(eventLoopGroupProvider: .createNew)
        self.monitoringService = MonitoringService(httpClient: httpClient)
        self.tokenRotationService = TokenRotationService(httpClient: httpClient)
        self.recoveryService = RecoveryService(httpClient: httpClient)
        
        logger.info("üõ°Ô∏è SecurityManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }
    
    deinit {
        Task {
            await shutdown()
        }
    }
    
    // MARK: - Public Methods
    
    public func initialize() async {
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        do {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try await loadConfiguration()
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            await monitoringService.initialize()
            await tokenRotationService.initialize()
            await recoveryService.initialize()
            
            // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            startMonitoring()
            
            // –ó–∞–ø—É—Å–∫ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            startTokenRotation()
            
            // –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
            startAlertProcessing()
            
            isRunning = true
            systemStatus = .running
            lastUpdate = Date()
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞")
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
            await sendAlert(SecurityAlert(
                type: .systemStart,
                message: "–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
                severity: .info
            ))
            
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: \(error)")
            systemStatus = .error
            await sendAlert(SecurityAlert(
                type: .systemError,
                message: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: \(error.localizedDescription)",
                severity: .critical
            ))
        }
    }
    
    public func shutdown() async {
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        isRunning = false
        systemStatus = .stopping
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á
        monitoringTask?.cancel()
        tokenRotationTask?.cancel()
        alertTask?.cancel()
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        await monitoringService.shutdown()
        await tokenRotationService.shutdown()
        await recoveryService.shutdown()
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞
        try? await httpClient.shutdown()
        
        systemStatus = .stopped
        lastUpdate = Date()
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    }
    
    public func rotateTokens() async {
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤")
        
        do {
            await tokenRotationService.rotateAllTokens()
            await sendAlert(SecurityAlert(
                type: .tokenRotation,
                message: "–†–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                severity: .info
            ))
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: \(error)")
            await sendAlert(SecurityAlert(
                type: .tokenRotationError,
                message: "–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: \(error.localizedDescription)",
                severity: .warning
            ))
        }
    }
    
    public func testRecovery() async {
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        do {
            let result = await recoveryService.testRecovery()
            await sendAlert(SecurityAlert(
                type: .recoveryTest,
                message: "–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω: \(result.success ? "—É—Å–ø–µ—à–Ω–æ" : "—Å –æ—à–∏–±–∫–∞–º–∏")",
                severity: result.success ? .info : .warning
            ))
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: \(error)")
            await sendAlert(SecurityAlert(
                type: .recoveryTestError,
                message: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)",
                severity: .warning
            ))
        }
    }
    
    public func emergencyRecovery() async {
        logger.info("üö® –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        await sendAlert(SecurityAlert(
            type: .emergencyRecovery,
            message: "–ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
            severity: .critical
        ))
        
        do {
            let result = await recoveryService.startFullRecovery(reason: "emergency_manual")
            await sendAlert(SecurityAlert(
                type: .recoveryComplete,
                message: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã: \(result.newDomains?.joined(separator: ", ") ?? "–Ω–µ —Å–æ–∑–¥–∞–Ω—ã")",
                severity: .info
            ))
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: \(error)")
            await sendAlert(SecurityAlert(
                type: .recoveryError,
                message: "–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)",
                severity: .critical
            ))
        }
    }
    
    // MARK: - Private Methods
    
    private func loadConfiguration() async throws {
        logger.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    }
    
    private func startMonitoring() {
        monitoringTask = Task {
            while !Task.isCancelled {
                do {
                    let status = await monitoringService.checkAllServices()
                    await updateSystemStatus(status)
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏
                    if status.hasCriticalFailures {
                        await handleCriticalFailure(status)
                    }
                    
                } catch {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: \(error)")
                }
                
                try? await Task.sleep(nanoseconds: UInt64(configuration.monitoringInterval * 1_000_000_000))
            }
        }
    }
    
    private func startTokenRotation() {
        tokenRotationTask = Task {
            while !Task.isCancelled {
                try? await Task.sleep(nanoseconds: UInt64(configuration.tokenRotationInterval * 1_000_000_000))
                
                if !Task.isCancelled {
                    await rotateTokens()
                }
            }
        }
    }
    
    private func startAlertProcessing() {
        alertTask = Task {
            while !Task.isCancelled {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
                await processAlerts()
                try? await Task.sleep(nanoseconds: 5_000_000_000) // 5 —Å–µ–∫—É–Ω–¥
            }
        }
    }
    
    private func updateSystemStatus(_ status: MonitoringStatus) {
        Task { @MainActor in
            lastUpdate = Date()
            
            if status.hasCriticalFailures {
                systemStatus = .critical
            } else if status.hasWarnings {
                systemStatus = .warning
            } else {
                systemStatus = .running
            }
        }
    }
    
    private func handleCriticalFailure(_ status: MonitoringStatus) async {
        logger.warning("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏")
        
        await sendAlert(SecurityAlert(
            type: .criticalFailure,
            message: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ –≤ —Å–∏—Å—Ç–µ–º–µ. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
            severity: .critical
        ))
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è—Ö
        if configuration.autoRecoveryEnabled {
            await emergencyRecovery()
        }
    }
    
    private func processAlerts() async {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        for alert in activeAlerts {
            if alert.timestamp.timeIntervalSinceNow < -configuration.alertRetentionTime {
                await MainActor.run {
                    activeAlerts.removeAll { $0.id == alert.id }
                }
            }
        }
    }
    
    private func sendAlert(_ alert: SecurityAlert) async {
        await MainActor.run {
            activeAlerts.append(alert)
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await sendTelegramAlert(alert)
        await sendSystemNotification(alert)
        
        logger.info("üì¢ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: \(alert.message)")
    }
    
    private func sendTelegramAlert(_ alert: SecurityAlert) async {
        guard let telegramConfig = configuration.telegramConfig else { return }
        
        do {
            let message = formatTelegramMessage(alert)
            try await sendTelegramMessage(
                botToken: telegramConfig.botToken,
                chatId: telegramConfig.chatId,
                message: message
            )
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∞–ª–µ—Ä—Ç–∞: \(error)")
        }
    }
    
    private func sendSystemNotification(_ alert: SecurityAlert) async {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è macOS
        let content = UNMutableNotificationContent()
        content.title = "Vote Security Alert"
        content.body = alert.message
        content.sound = .default
        
        let request = UNNotificationRequest(
            identifier: alert.id.uuidString,
            content: content,
            trigger: nil
        )
        
        try? await UNUserNotificationCenter.current().add(request)
    }
    
    private func formatTelegramMessage(_ alert: SecurityAlert) -> String {
        let emoji = alert.severity.emoji
        let timestamp = DateFormatter.localizedString(from: alert.timestamp, dateStyle: .short, timeStyle: .medium)
        
        return """
        \(emoji) **Vote Security Alert**
        
        **–¢–∏–ø:** \(alert.type.rawValue)
        **–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:** \(alert.severity.rawValue)
        **–í—Ä–µ–º—è:** \(timestamp)
        
        **–°–æ–æ–±—â–µ–Ω–∏–µ:**
        \(alert.message)
        
        **ID:** `\(alert.id.uuidString)`
        """
    }
    
    private func sendTelegramMessage(botToken: String, chatId: String, message: String) async throws {
        let url = "https://api.telegram.org/bot\(botToken)/sendMessage"
        
        var request = HTTPClientRequest(url: url)
        request.method = .POST
        request.headers.add(name: "Content-Type", value: "application/json")
        
        let body = [
            "chat_id": chatId,
            "text": message,
            "parse_mode": "Markdown"
        ]
        
        request.body = .data(try JSONSerialization.data(withJSONObject: body))
        
        let response = try await httpClient.execute(request, timeout: .seconds(10))
        
        guard response.status == .ok else {
            throw SecurityError.telegramSendFailed
        }
    }
}

// MARK: - Supporting Types

public enum SystemStatus: String, CaseIterable {
    case initializing = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
    case running = "–†–∞–±–æ—Ç–∞–µ—Ç"
    case warning = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
    case critical = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
    case stopping = "–û—Å—Ç–∞–Ω–æ–≤–∫–∞"
    case stopped = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    case error = "–û—à–∏–±–∫–∞"
}

public struct SecurityAlert: Identifiable {
    public let id = UUID()
    public let type: AlertType
    public let message: String
    public let severity: AlertSeverity
    public let timestamp = Date()
    
    public init(type: AlertType, message: String, severity: AlertSeverity) {
        self.type = type
        self.message = message
        self.severity = severity
    }
}

public enum AlertType: String, CaseIterable {
    case systemStart = "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
    case systemError = "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    case tokenRotation = "–†–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤"
    case tokenRotationError = "–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"
    case recoveryTest = "–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
    case recoveryTestError = "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
    case emergencyRecovery = "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    case recoveryComplete = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    case recoveryError = "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
    case criticalFailure = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π"
    case monitoringAlert = "–ê–ª–µ—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
}

public enum AlertSeverity: String, CaseIterable {
    case info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    case warning = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
    case critical = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
    
    var emoji: String {
        switch self {
        case .info: return "‚ÑπÔ∏è"
        case .warning: return "‚ö†Ô∏è"
        case .critical: return "üö®"
        }
    }
}

public struct SecurityConfiguration {
    public let monitoringInterval: TimeInterval = 30 // —Å–µ–∫—É–Ω–¥—ã
    public let tokenRotationInterval: TimeInterval = 24 * 60 * 60 // 24 —á–∞—Å–∞
    public let alertRetentionTime: TimeInterval = 7 * 24 * 60 * 60 // 7 –¥–Ω–µ–π
    public let autoRecoveryEnabled: Bool = true
    
    public let telegramConfig: TelegramConfig?
    public let webhookConfig: WebhookConfig?
    
    public init(telegramConfig: TelegramConfig? = nil, webhookConfig: WebhookConfig? = nil) {
        self.telegramConfig = telegramConfig
        self.webhookConfig = webhookConfig
    }
}

public struct TelegramConfig {
    public let botToken: String
    public let chatId: String
    
    public init(botToken: String, chatId: String) {
        self.botToken = botToken
        self.chatId = chatId
    }
}

public struct WebhookConfig {
    public let url: String
    public let token: String?
    
    public init(url: String, token: String? = nil) {
        self.url = url
        self.token = token
    }
}

public enum SecurityError: Error {
    case telegramSendFailed
    case configurationLoadFailed
    case serviceInitializationFailed
}
